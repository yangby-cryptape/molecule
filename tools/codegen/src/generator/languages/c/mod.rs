use std::io;

use crate::{ast::verified as ast, VERSION};

mod generator;
use generator::Generator as _;

pub(crate) struct Generator;

impl super::LanguageGenerator for Generator {
    fn generate<W>(writer: &mut W, ast: &ast::Ast) -> io::Result<()>
    where
        W: io::Write,
    {
        writeln!(writer, "// Generated by Molecule {}", VERSION)?;
        writeln!(writer)?;
        writeln!(writer, r#"#include "molecule.h""#)?;
        writeln!(writer)?;
        for decl in &ast.decls[..] {
            match decl.as_ref() {
                ast::TopDecl::Option_(ref i) => i.generate(writer)?,
                ast::TopDecl::Union(ref i) => i.generate(writer)?,
                ast::TopDecl::Array(ref i) => i.generate(writer)?,
                ast::TopDecl::Struct(ref i) => i.generate(writer)?,
                ast::TopDecl::FixVec(ref i) => i.generate(writer)?,
                ast::TopDecl::DynVec(ref i) => i.generate(writer)?,
                ast::TopDecl::Table(ref i) => i.generate(writer)?,
                ast::TopDecl::Atom(_) => unreachable!(),
            };
        }
        Ok(())
    }
}
